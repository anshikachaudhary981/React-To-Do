{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qMC8B5BC,MA1Bf,SAAmBC,GAEf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAD,GACxB,OAAO,yBAAKE,UAAU,OAAOC,IAAOH,EAAMG,KACtC,2BACA,2BAAOC,KAAK,OACXC,GAAIL,EAAMG,IACVG,MAAON,EAAMO,KACbC,SAAa,SAACC,GACVX,EAAMY,UAAUD,EAAEE,OAAOL,MAAMN,EAAMG,QAGzC,8BACG,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAC1CC,QAAU,kBAAMf,EAAMgB,WAAWd,EAAMG,cAOnD,OACI,6BAAMJ,I,eCpBdgB,IAAQC,IAAIC,K,IAuFGC,E,kDAlFb,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACDqB,MAAQ,CACXnB,MAAO,GACPoB,YAAY,CACVb,KAAM,GACRJ,IAAK,KAGP,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAZD,E,wDAeRb,GACVe,KAAKC,SAAS,CACZL,YAAY,CACVb,KAAKE,EAAEE,OAAOL,MACdH,IAAKuB,KAAKC,W,8BAKRlB,GACNA,EAAEmB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACM,KAAfA,EAAQtB,KAAU,CACnB,IAAMyB,EAAQ,sBAAOR,KAAKL,MAAMnB,OAAlB,CAAwB6B,IACtCL,KAAKC,SAAS,CACZzB,MAAQgC,EACRZ,YAAY,CACVb,KAAK,GACLJ,IAAI,S,iCAODA,GACT,IAAM8B,EAAgBT,KAAKL,MAAMnB,MAAMkC,QAAO,SAAAlC,GAAK,OAAIA,EAAMG,MAAMA,KACnEqB,KAAKC,SAAS,CACZzB,MAAMiC,M,gCAIA1B,EAAKJ,GACb,IAAMH,EAAQwB,KAAKL,MAAMnB,MACzBA,EAAMC,KAAI,SAAAD,GACLA,EAAMG,MAAMA,IACbH,EAAMO,KAAKA,MAGfiB,KAAKC,SAAS,CACZzB,MAAQA,M,+BAIR,OAEE,yBAAKE,UAAU,OACf,gCACE,0BAAMG,GAAK,aAAa8B,SAAUX,KAAKD,SACrC,2BAAOnB,KAAK,OAAOgC,YAAY,aAAa9B,MAAOkB,KAAKL,MAAMC,YAAYb,KAC1EC,SAAUgB,KAAKH,cACf,4BAAQjB,KAAK,UAAb,SAIH,kBAAC,EAAD,CAAWJ,MAASwB,KAAKL,MAAMnB,MAC/Bc,WAAcU,KAAKV,WACnBJ,UAAac,KAAKd,iB,GA3EP2B,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.bc79dc36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\nfunction ListItems(props){\r\n\r\n    const items = props.items;\r\n    const listItems = items.map(items=>{\r\n        return <div className='list' key = {items.key}>\r\n            <p>\r\n            <input type='text'\r\n             id={items.key}\r\n             value={items.text}\r\n             onChange = { (e) => {\r\n                 props.setUpdate(e.target.value,items.key)\r\n             }}\r\n            ></input>\r\n             <span>\r\n                <FontAwesomeIcon className='faicons' icon=\"trash\"\r\n                onClick={ () => props.deleteItem(items.key)}>\r\n\r\n                </FontAwesomeIcon>\r\n            </span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>{listItems}</div>\r\n    )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport{ faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash)\n\n// we will convert this into class component\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items :[],\n      currentItem:{\n        text :'',\n      key :''\n    }\n  }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n}\n\nhandleInput(e){\n  this.setState({\n    currentItem:{\n      text:e.target.value,\n      key: Date.now()\n    }\n  })\n}\n\naddItem(e){\n  e.preventDefault();\n  const newItem = this.state.currentItem;\n  console.log(newItem)\n  if(newItem.text!==\"\"){\n    const newItems = [...this.state.items,newItem];\n    this.setState({\n      items : newItems,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n  }\n\n}\n\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(items => items.key!==key);\n  this.setState({\n    items:filteredItems\n  })\n}\n\nsetUpdate(text,key){\n  const items = this.state.items;\n  items.map(items => {\n    if(items.key===key){\n      items.text=text;\n    }\n  })\n  this.setState({\n    items : items\n  })\n}\n  render(){\n    return (\n\n      <div className='App'>\n      <header>\n        <form id = 'to-do-form' onSubmit={this.addItem}>\n          <input type='text' placeholder='Enter Text' value={this.state.currentItem.text}\n          onChange={this.handleInput}></input>\n          <button type='submit'>ADD</button>\n        </form>\n      </header>\n\n       <ListItems items = {this.state.items}\n       deleteItem = {this.deleteItem}\n       setUpdate = {this.setUpdate}>\n      </ListItems> \n      \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}